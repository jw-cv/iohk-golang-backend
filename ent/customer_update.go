// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"iohk-golang-backend-preprod/ent/customer"
	"iohk-golang-backend-preprod/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSurname sets the "surname" field.
func (cu *CustomerUpdate) SetSurname(s string) *CustomerUpdate {
	cu.mutation.SetSurname(s)
	return cu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableSurname(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetSurname(*s)
	}
	return cu
}

// SetNumber sets the "number" field.
func (cu *CustomerUpdate) SetNumber(i int) *CustomerUpdate {
	cu.mutation.ResetNumber()
	cu.mutation.SetNumber(i)
	return cu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableNumber(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetNumber(*i)
	}
	return cu
}

// AddNumber adds i to the "number" field.
func (cu *CustomerUpdate) AddNumber(i int) *CustomerUpdate {
	cu.mutation.AddNumber(i)
	return cu
}

// SetGender sets the "gender" field.
func (cu *CustomerUpdate) SetGender(c customer.Gender) *CustomerUpdate {
	cu.mutation.SetGender(c)
	return cu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableGender(c *customer.Gender) *CustomerUpdate {
	if c != nil {
		cu.SetGender(*c)
	}
	return cu
}

// SetCountry sets the "country" field.
func (cu *CustomerUpdate) SetCountry(s string) *CustomerUpdate {
	cu.mutation.SetCountry(s)
	return cu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCountry(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCountry(*s)
	}
	return cu
}

// SetDependants sets the "dependants" field.
func (cu *CustomerUpdate) SetDependants(i int) *CustomerUpdate {
	cu.mutation.ResetDependants()
	cu.mutation.SetDependants(i)
	return cu
}

// SetNillableDependants sets the "dependants" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDependants(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetDependants(*i)
	}
	return cu
}

// AddDependants adds i to the "dependants" field.
func (cu *CustomerUpdate) AddDependants(i int) *CustomerUpdate {
	cu.mutation.AddDependants(i)
	return cu
}

// SetBirthDate sets the "birth_date" field.
func (cu *CustomerUpdate) SetBirthDate(t time.Time) *CustomerUpdate {
	cu.mutation.SetBirthDate(t)
	return cu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBirthDate(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetBirthDate(*t)
	}
	return cu
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Surname(); ok {
		if err := customer.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Customer.surname": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Number(); ok {
		if err := customer.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Customer.number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Gender(); ok {
		if err := customer.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Customer.gender": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Country(); ok {
		if err := customer.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Customer.country": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Dependants(); ok {
		if err := customer.DependantsValidator(v); err != nil {
			return &ValidationError{Name: "dependants", err: fmt.Errorf(`ent: validator failed for field "Customer.dependants": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Surname(); ok {
		_spec.SetField(customer.FieldSurname, field.TypeString, value)
	}
	if value, ok := cu.mutation.Number(); ok {
		_spec.SetField(customer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNumber(); ok {
		_spec.AddField(customer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Gender(); ok {
		_spec.SetField(customer.FieldGender, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Country(); ok {
		_spec.SetField(customer.FieldCountry, field.TypeString, value)
	}
	if value, ok := cu.mutation.Dependants(); ok {
		_spec.SetField(customer.FieldDependants, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDependants(); ok {
		_spec.AddField(customer.FieldDependants, field.TypeInt, value)
	}
	if value, ok := cu.mutation.BirthDate(); ok {
		_spec.SetField(customer.FieldBirthDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSurname sets the "surname" field.
func (cuo *CustomerUpdateOne) SetSurname(s string) *CustomerUpdateOne {
	cuo.mutation.SetSurname(s)
	return cuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableSurname(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetSurname(*s)
	}
	return cuo
}

// SetNumber sets the "number" field.
func (cuo *CustomerUpdateOne) SetNumber(i int) *CustomerUpdateOne {
	cuo.mutation.ResetNumber()
	cuo.mutation.SetNumber(i)
	return cuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableNumber(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetNumber(*i)
	}
	return cuo
}

// AddNumber adds i to the "number" field.
func (cuo *CustomerUpdateOne) AddNumber(i int) *CustomerUpdateOne {
	cuo.mutation.AddNumber(i)
	return cuo
}

// SetGender sets the "gender" field.
func (cuo *CustomerUpdateOne) SetGender(c customer.Gender) *CustomerUpdateOne {
	cuo.mutation.SetGender(c)
	return cuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableGender(c *customer.Gender) *CustomerUpdateOne {
	if c != nil {
		cuo.SetGender(*c)
	}
	return cuo
}

// SetCountry sets the "country" field.
func (cuo *CustomerUpdateOne) SetCountry(s string) *CustomerUpdateOne {
	cuo.mutation.SetCountry(s)
	return cuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCountry(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCountry(*s)
	}
	return cuo
}

// SetDependants sets the "dependants" field.
func (cuo *CustomerUpdateOne) SetDependants(i int) *CustomerUpdateOne {
	cuo.mutation.ResetDependants()
	cuo.mutation.SetDependants(i)
	return cuo
}

// SetNillableDependants sets the "dependants" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDependants(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetDependants(*i)
	}
	return cuo
}

// AddDependants adds i to the "dependants" field.
func (cuo *CustomerUpdateOne) AddDependants(i int) *CustomerUpdateOne {
	cuo.mutation.AddDependants(i)
	return cuo
}

// SetBirthDate sets the "birth_date" field.
func (cuo *CustomerUpdateOne) SetBirthDate(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetBirthDate(t)
	return cuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBirthDate(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetBirthDate(*t)
	}
	return cuo
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Surname(); ok {
		if err := customer.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Customer.surname": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Number(); ok {
		if err := customer.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Customer.number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Gender(); ok {
		if err := customer.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Customer.gender": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Country(); ok {
		if err := customer.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Customer.country": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Dependants(); ok {
		if err := customer.DependantsValidator(v); err != nil {
			return &ValidationError{Name: "dependants", err: fmt.Errorf(`ent: validator failed for field "Customer.dependants": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Surname(); ok {
		_spec.SetField(customer.FieldSurname, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Number(); ok {
		_spec.SetField(customer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNumber(); ok {
		_spec.AddField(customer.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Gender(); ok {
		_spec.SetField(customer.FieldGender, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Country(); ok {
		_spec.SetField(customer.FieldCountry, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Dependants(); ok {
		_spec.SetField(customer.FieldDependants, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDependants(); ok {
		_spec.AddField(customer.FieldDependants, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.BirthDate(); ok {
		_spec.SetField(customer.FieldBirthDate, field.TypeTime, value)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
